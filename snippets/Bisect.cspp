// -*- mode:CSharp -*-
#include "MyUtil.cs"

class Bisect
{
    /* BisectRight(a, x) returns the index where to insert x in a sorted list a.
     * 
     * The return value i is such that for all j < i, a[j] <= x and
     * for all j >= i, a[j] > x.
     */
    public static
	int BisectRight<T>(T[] a, T x, int lo=0, int hi=-1) where T:IComparable
    {
	if (hi < 0)  hi = a.Length;
	while (lo < hi)
	{
	    int mid = lo + (hi - lo) / 2;
	    if (x.CompareTo(a[mid]) < 0) { hi = mid; }
	    else { lo = mid + 1; }
	}
	return lo;
    }
								    
    /* BisectLeft(a, x) returns the index where to insert x in a sorted list a.
     * 
     * The return value i is such that for all j < i, a[j] < x and
     * for all j >= i, a[j] >= x.
     */
    public static
	int BisectLeft<T>(T[] a, T x, int lo=0, int hi=-1) where T:IComparable
    {
	if (hi < 0)  hi = a.Length;
	while (lo < hi)
	{
	    int mid = lo + (hi - lo) / 2;
	    if (a[mid].CompareTo(x) < 0) { lo = mid + 1; }
	    else { hi = mid; }
	}
	return lo;
    }
}
